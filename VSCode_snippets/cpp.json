{
	// Place your snippets for bat here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

		"tolua_exports" : {
			"scope": "cpp",
			"prefix": "lx",
			"body": [
				"//tolua_exports",
			],
			"description": "//tolua_exports"
		},

		"tolua_begin" : {
			"scope": "cpp",
			"prefix": "lb",
			"body": [
				"\t//tolua_begin",
			],
			"description": "//tolua_begin"
		},

		"tolua_end" : {
			"scope": "cpp",
			"prefix": "le",
			"body": [
				"\t//tolua_end",
			],
			"description": "//tolua_end"
		},

		"tododatetime" : {
			"scope": "cpp",
			"prefix": "todo",
			"body": [
				"//TODO: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND: ",
			],
			"description": "TODO with a datetime"
		},

		"ifandroid": {
			"scope": "cpp",
			"prefix": "ifandroid",
			"body": [
				"#if defined(ANDROID)\n$1\n#endif",
			],
			"description": "#if defined(ANDROID)"
		},

		"ifed": {
			"scope": "cpp",
			"prefix": "ifed",
			"body": [
				"#if defined(BUILD_MINI_EDITOR_APP)\n$1\n#endif",
			],
			"description": "#if defined(ANDROID)"
		},

		"ifandroidplatform": {
			"scope": "cpp",
			"prefix": "ifandroidp",
			"body": [
				"#if OGRE_PLATFORM == OGRE_PLATFORM_ANDROID\n$1\n#endif",
			],
			"description": "#if OGRE_PLATFORM == OGRE_PLATFORM_ANDROID"
		},

		"ifharmony": {
			"scope": "cpp",
			"prefix": "ifharmony",
			"body": [
				"#if defined(HARMONY)\n$1\n#else\n\n#endif",
			],
			"description": "#if defined(HARMONY)"
		},

		"ifnharmony": {
			"scope": "cpp",
			"prefix": "ifharmony",
			"body": [
				"#if !defined(HARMONY)\n$1\n#endif",
			],
			"description": "#if defined(HARMONY)"
		},

		"ifharmonyplatform": {
			"scope": "cpp",
			"prefix": "ifharmonyp",
			"body": [
				"#if OGRE_PLATFORM == OGRE_PLATFORM_HARMONY\n$1\n#else\n\n#endif",
			],
			"description": "#if OGRE_PLATFORM == OGRE_PLATFORM_HARMONY"
		},

		"ifdefinedplatform": {
			"scope": "cpp",
			"prefix": "ifplatform",
			"body": [
				"#if defined(SERVER)\n\n#elif defined(IOS)\n\n#elif defined(ANDROID)\n\n#else\n\n#endif",
			],
			"description": "#ifdef platforms"
		},

		"ifnotandroidplatform": {
			"scope": "cpp",
			"prefix": "ifnandroid",
			"body": [
				"#ifndef ANDROID\n\n#else\n\n#endif",
			],
			"description": "#ifndef ANDROID"
		},

		"ifnotiosplatform": {
			"scope": "cpp",
			"prefix": "ifnios",
			"body": [
				"#if OGRE_PLATFORM != OGRE_PLATFORM_APPLE\n\n#else\n\n#endif",
			],
			"description": "#if OGRE_PLATFORM != OGRE_PLATFORM_APPLE"
		},

		"LogStringMsg": {
			"scope": "cpp",
			"prefix": "logd",
			"body": [
				"LogStringMsg(\"$CLIPBOARD $1\");",
			],
			"description": "LogStringMsg(\"$CLIPBOARD\");"
		},

		"LogStringMsg dv": {
			"scope": "cpp",
			"prefix": "logdv",
			"body": [
				"LogStringMsg(\"$1 = %$2\", $1);",
			],
			"description": "LogStringMsg(\"var = %?\");"
		},

		"LogStringMsg dv2": {
			"scope": "cpp",
			"prefix": "logdv2",
			"body": [
				"LogStringMsg(\"$1 = %$2 | $3 = %$4 \", $1, $3);",
			],
			"description": "LogStringMsg(\"var = %? | var2 = %?\");"
		},

		"LogStringMsg dv3": {
			"scope": "cpp",
			"prefix": "logdv3",
			"body": [
				"LogStringMsg(\"$1 = %$2 | $3 = %$4 | $5 = %$6 \", $1, $3, $5);",
			],
			"description": "LogStringMsg(\"var = %? | var2 = %? | var3 = %?\");"
		},

		"LogStringMsg dvec3": {
			"scope": "cpp",
			"prefix": "logdvec3",
			"body": [
				"LogStringMsg(\"$1 = (%$2, %$2, %$2)\", $1.x, $1.y, $1.z);",
			],
			"description": "LogStringMsg(\"v = (%?, %?, %?)\");"
		},

		"header": {
			"scope": "cpp",
			"prefix": "ndef",
			"body": [
				"#ifndef __${TM_FILENAME_BASE}_h__",
				"#define __${TM_FILENAME_BASE}_h__ 1",
				"#endif//__${TM_FILENAME_BASE}_h__",
			],
			"description": ".h :#ifndef"
		},

		"simple class definition": {
			"scope": "cpp",
			"prefix": "clsdef",
			"body": [
				"class ${TM_FILENAME_BASE}",
				"{",
				"public:",
				"\t${TM_FILENAME_BASE}();",
				"\t~${TM_FILENAME_BASE}();",
				"private:",
				"",
				"};",

			],
			"description": "simple class definition"
		},

		"Studio api header": {
			"scope": "cpp",
			"prefix": "apiheader",
			"body": [
				"#ifndef __${TM_FILENAME_BASE}_h__",
				"#define __${TM_FILENAME_BASE}_h__ 1",
				"\n",
				"#include \"api.h\"",
				"\n",
				"#if defined(${TM_FILENAME_BASE})",
				"# define ${TM_FILENAME_BASE}_EXPORT Q_DECL_EXPORT",
				"#else",
				"# define ${TM_FILENAME_BASE}_EXPORT Q_DECL_IMPORT",
				"#endif",
				"\n",
				"namespace Studio",
				"{",
				"//-------------------------- ${TM_FILENAME_BASE} ---------------------------------",
				"//---------------------------------------------------------------------------",
				"\tclass ${TM_FILENAME_BASE}_EXPORT ${TM_FILENAME_BASE}Manager : public QObject",
				"\t{",
				"\t\tQ_OBJECT;",
				"\tpublic:",
				"",
				"\tprotected:",
				"\t\tvirtual ~${TM_FILENAME_BASE}Manager() {}",
				"\tprivate:",
				"",
				"\t};",
				"}",
				"\n",
				"#endif//__${TM_FILENAME_BASE}_h__",
			],
			"description": "Studio api header"
		},

		"Studio manager header": {
			"scope": "cpp",
			"prefix": "managerheader",
			"body": [
				"#ifndef __${TM_FILENAME_BASE}_h__",
				"#define __${TM_FILENAME_BASE}_h__ 1",
				"",
				"#include \"api.h\"",
				"#include \"${TM_FILENAME_BASE}.h\"",
				"",
				"//-------------------------- ${TM_FILENAME_BASE} ---------------------------------",
				"//---------------------------------------------------------------------------",
				"class ${TM_FILENAME_BASE} : public Studio::${TM_FILENAME_BASE}",
				"{",
				"\tQ_OBJECT;",
				"public:",
				"\t${TM_FILENAME_BASE}();",
				"protected:",
				"\tvirtual ~${TM_FILENAME_BASE}();",
				"private:",
				"",
				"};",
				"",
				"#endif//__${TM_FILENAME_BASE}_h__",
			],
			"description": "Studio api header"
		},

		"simple class implementation": {
			"scope": "cpp",
			"prefix": "clsimp",
			"body": [
				"#include \"${TM_FILENAME_BASE}.h\"",
				"\n",
				"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}()",
				"{",
				"}",
				"\n",
				"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}()",
				"{",
				"}",
			],

			"description": "simple class implementation"
		},

		"annotate file": {
			"scope": "cpp",
			"prefix": "annotatefile",
			"body": [
				"//--------------------------------------------------------------------\n// 文件名:			$TM_FILENAME\n// 内  容:			\n// 说  明:			\n// 日  期:			$CURRENT_YEAR年$CURRENT_MONTH月$CURRENT_DATE日\n// 创建人:			Seckawijoki\n//--------------------------------------------------------------------",
			],
			"description": "annotate file"
		},

		"annotate class": {
			"scope": "cpp",
			"prefix": "annotateclass",
			"body": [
				"///     本类的功能：$1\n///\n///     设计类型：\n///     功能描述：",
			],
			"description": "annotate class"
		},

		"annotate function": {
			"scope": "cpp",
			"prefix": "annotatefunction",
			"body": [
				"/**\n@brief \n@param \n@return \n*/",
			],
			"description": "annotate function"
		},

		"annotate member": {
			"scope": "cpp",
			"prefix": "annotatemember",
			"body": [
				"/**\n@brief\t$1\n */",
			],
			"description": "annotate member"
		},

		"annotate line": {
			"scope": "cpp",
			"prefix": "annotateline",
			"body": [
				"/*\n\t$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE：$1  \n\tcodeby： pengdapu\n*/",
			],
			"description": "annotate member"
		},
}